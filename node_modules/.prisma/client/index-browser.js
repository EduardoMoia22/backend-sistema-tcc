
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.8.0
 * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
 */
Prisma.prismaVersion = {
  client: "4.8.0",
  engine: "d6e67a83f971b175a593ccc12e15c4a757f93ffe"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AccountsReceivableScalarFieldEnum = makeEnum({
  id: 'id',
  saleID: 'saleID',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ClientScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  fantasy: 'fantasy',
  cpf: 'cpf',
  cnpj: 'cnpj',
  fundation: 'fundation',
  birthday: 'birthday',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.GroupScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.ItemScalarFieldEnum = makeEnum({
  id: 'id',
  amount: 'amount',
  created_at: 'created_at',
  updated_at: 'updated_at',
  saleID: 'saleID',
  productID: 'productID'
});

exports.Prisma.ManufacturerScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.PaymentMethodsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  accounts_receivable: 'accounts_receivable',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  bar_code: 'bar_code',
  reference: 'reference',
  manufacturerID: 'manufacturerID',
  groupID: 'groupID',
  price: 'price',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at',
  active: 'active',
  stockID: 'stockID'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SaleScalarFieldEnum = makeEnum({
  id: 'id',
  open: 'open',
  clientID: 'clientID',
  paymentID: 'paymentID',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.StockScalarFieldEnum = makeEnum({
  id: 'id',
  stockMin: 'stockMin',
  stock: 'stock',
  active: 'active',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  created_at: 'created_at',
  updated_at: 'updated_at'
});


exports.Prisma.ModelName = makeEnum({
  Product: 'Product',
  Manufacturer: 'Manufacturer',
  Group: 'Group',
  Client: 'Client',
  User: 'User',
  Sale: 'Sale',
  Item: 'Item',
  PaymentMethods: 'PaymentMethods',
  AccountsReceivable: 'AccountsReceivable',
  Stock: 'Stock'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
